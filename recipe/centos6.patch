From d1625cea81197b855f433ba77cf0e15300c3df16 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jan=20Jan=C3=9Fen?= <janssen@mpie.de>
Date: Tue, 6 Feb 2024 20:44:25 +0100
Subject: [PATCH] conda-forge patch

---
 src/cmd/flux-exec.c                   |  4 +++-
 src/cmd/flux-job.c                    |  7 +++++--
 src/common/libflux/message.c          | 14 +++++---------
 src/common/libsubprocess/subprocess.c |  6 ++++--
 src/common/libutil/test/fileref.c     |  3 ++-
 src/modules/kvs/cache.c               |  4 +---
 src/shell/output.c                    |  4 +++-
 t/rexec/rexec_count_stdout.c          |  6 ++++--
 t/rexec/rexec_getline.c               |  6 ++++--
 t/t2260-job-list.t                    | 13 +------------
 10 files changed, 32 insertions(+), 35 deletions(-)

diff --git a/src/cmd/flux-exec.c b/src/cmd/flux-exec.c
index b7fadafb5011..2f2cf16566d4 100644
--- a/src/cmd/flux-exec.c
+++ b/src/cmd/flux-exec.c
@@ -208,9 +208,11 @@ void output_cb (flux_subprocess_t *p, const char *stream)
         log_err_exit ("flux_subprocess_getline");
 
     if (lenp) {
+        int rc;
         if (optparse_getopt (opts, "label-io", NULL) > 0)
             fprintf (fstream, "%d: ", flux_subprocess_rank (p));
-        fwrite (ptr, lenp, 1, fstream);
+        rc = fwrite (ptr, lenp, 1, fstream);
+        (void) rc;
     }
 }
 
diff --git a/src/cmd/flux-job.c b/src/cmd/flux-job.c
index 79e5b056e522..b5afd1efe822 100644
--- a/src/cmd/flux-job.c
+++ b/src/cmd/flux-job.c
@@ -1703,9 +1703,11 @@ static void handle_output_data (struct attach_ctx *ctx, json_t *context)
     else
         fp = stderr;
     if (len > 0) {
+        int rc;
         if (optparse_hasopt (ctx->p, "label-io"))
             fprintf (fp, "%s: ", rank);
-        fwrite (data, len, 1, fp);
+        rc = fwrite (data, len, 1, fp);
+        (void) rc;
         /*  If attached to a pty, terminal is in raw mode so a carriage
          *  return will be necessary to return cursor to the start of line.
          */
@@ -2260,7 +2262,8 @@ void handle_exec_log_msg (struct attach_ctx *ctx, double ts, json_t *context)
                  rank,
                  stream);
     }
-    fwrite (data, len, 1, stderr);
+    int rc = fwrite (data, len, 1, stderr);
+    (void) rc;
 }
 
 static struct idset *all_taskids (const struct taskmap *map)
diff --git a/src/common/libflux/message.c b/src/common/libflux/message.c
index 7191d3996e40..765dda11c3f0 100644
--- a/src/common/libflux/message.c
+++ b/src/common/libflux/message.c
@@ -1241,12 +1241,10 @@ static void flags2str (int flags, char *buf, int buflen)
 
 static void userid2str (uint32_t userid, char *buf, int buflen)
 {
-    int n;
     if (userid == FLUX_USERID_UNKNOWN)
-        n = snprintf (buf, buflen, "unknown");
+        snprintf (buf, buflen, "unknown");
     else
-        n = snprintf (buf, buflen, "%u", userid);
-    assert (n < buflen);
+        snprintf (buf, buflen, "%u", userid);
 }
 
 static int roletostr (uint32_t role, const char *sep, char *buf, int buflen)
@@ -1286,14 +1284,12 @@ static void rolemask2str (uint32_t rolemask, char *buf, int buflen)
 
 static void nodeid2str (uint32_t nodeid, char *buf, int buflen)
 {
-    int n;
     if (nodeid == FLUX_NODEID_ANY)
-        n = snprintf (buf, buflen, "any");
+        snprintf (buf, buflen, "any");
     else if (nodeid == FLUX_NODEID_UPSTREAM)
-        n = snprintf (buf, buflen, "upstream");
+        snprintf (buf, buflen, "upstream");
     else
-        n = snprintf (buf, buflen, "%u", nodeid);
-    assert (n < buflen);
+        snprintf (buf, buflen, "%u", nodeid);
 }
 
 void flux_msg_fprint_ts (FILE *f, const flux_msg_t *msg, double timestamp)
diff --git a/src/common/libsubprocess/subprocess.c b/src/common/libsubprocess/subprocess.c
index 1c3a313a2778..ec93c40946dd 100644
--- a/src/common/libsubprocess/subprocess.c
+++ b/src/common/libsubprocess/subprocess.c
@@ -263,8 +263,10 @@ void flux_standard_output (flux_subprocess_t *p, const char *stream)
         }
     }
 
-    if (lenp)
-        fwrite (ptr, lenp, 1, fstream);
+    if (lenp) {
+        int rc = fwrite (ptr, lenp, 1, fstream);
+        (void) rc;
+    }
 }
 
 /*
diff --git a/src/common/libutil/test/fileref.c b/src/common/libutil/test/fileref.c
index ee4656109480..e7c792a8e10f 100644
--- a/src/common/libutil/test/fileref.c
+++ b/src/common/libutil/test/fileref.c
@@ -737,7 +737,8 @@ int main (int argc, char *argv[])
     test_dir ();
     test_link ();
     test_small ();
-    test_empty ();
+    if (have_sparse)
+        test_empty ();
     test_expfail ();
     test_pretty_print ();
 
diff --git a/src/modules/kvs/cache.c b/src/modules/kvs/cache.c
index 2b6d05c817da..07c1b0c4bd7c 100644
--- a/src/modules/kvs/cache.c
+++ b/src/modules/kvs/cache.c
@@ -365,10 +365,9 @@ struct cache_entry *cache_lookup (struct cache *cache, const char *ref)
 
 int cache_insert (struct cache *cache, struct cache_entry *entry)
 {
-    int rc;
 
     if (cache && entry) {
-        rc = zhashx_insert (cache->zhx, entry->blobref, entry);
+        zhashx_insert (cache->zhx, entry->blobref, entry);
         list_add (&cache->entries_list, &entry->entries_node);
         entry->notdirty_list = &cache->notdirty_list;
         entry->valid_list = &cache->valid_list;
@@ -378,7 +377,6 @@ int cache_insert (struct cache *cache, struct cache_entry *entry)
         if (entry->waitlist_valid
             && wait_queue_msgs_count (entry->waitlist_valid) > 0)
             list_add (entry->valid_list, &entry->valid_node);
-        assert (rc == 0);
     }
     return 0;
 }
diff --git a/src/shell/output.c b/src/shell/output.c
index dc3b4260326b..4fa9490e3cde 100644
--- a/src/shell/output.c
+++ b/src/shell/output.c
@@ -177,8 +177,10 @@ static int shell_output_term (struct shell_output *out)
                 f = stderr;
             }
             if ((output_type == FLUX_OUTPUT_TYPE_TERM) && len > 0) {
+                int rc;
                 fprintf (f, "%s: ", rank);
-                fwrite (data, len, 1, f);
+                rc = fwrite (data, len, 1, f);
+                (void) rc;
             }
             free (data);
         }
diff --git a/t/rexec/rexec_count_stdout.c b/t/rexec/rexec_count_stdout.c
index 49a942586e27..cce9341c808f 100644
--- a/t/rexec/rexec_count_stdout.c
+++ b/t/rexec/rexec_count_stdout.c
@@ -70,8 +70,10 @@ void output_cb (flux_subprocess_t *p, const char *stream)
         }
     }
 
-    if (lenp)
-        fwrite (ptr, lenp, 1, fstream);
+    if (lenp) {
+        int rc = fwrite (ptr, lenp, 1, fstream);
+        (void) rc;
+    }
 
     if (!strcasecmp (stream, "stdout"))
         stdout_count++;
diff --git a/t/rexec/rexec_getline.c b/t/rexec/rexec_getline.c
index 9171b02242c6..65c30fe1762f 100644
--- a/t/rexec/rexec_getline.c
+++ b/t/rexec/rexec_getline.c
@@ -74,8 +74,10 @@ void output_cb (flux_subprocess_t *p, const char *stream)
 
     if (!(ptr = flux_subprocess_getline (p, stream, &lenp)))
         log_err_exit ("flux_subprocess_getline");
-    if (lenp)
-        fwrite (ptr, lenp, 1, fstream);
+    if (lenp) {
+        int rc = fwrite (ptr, lenp, 1, fstream);
+        (void) (rc);
+    }
     else
         fprintf (fstream, "EOF\n");
 }
diff --git a/t/t2260-job-list.t b/t/t2260-job-list.t
index 3f5b811bf950..ddd13bceb357 100755
--- a/t/t2260-job-list.t
+++ b/t/t2260-job-list.t
@@ -2186,18 +2186,7 @@ test_expect_success 'job stats lists jobs in correct state in each queue' '
 	updateq=`flux job stats | jq ".queues[] | select( .name == \"updatequeue\" )"` &&
 	nosubmitq=`flux job stats | jq ".queues[] | select( .name == \"nosubmitqueue\" )"` &&
 	test -n "$nosubmitq" &&
-	echo $defaultq | jq -e ".job_states.depend == 0" &&
-	echo $defaultq | jq -e ".job_states.priority == 0" &&
-	echo $defaultq | jq -e ".job_states.sched == 0" &&
-	echo $defaultq | jq -e ".job_states.run == 0" &&
-	echo $defaultq | jq -e ".job_states.cleanup == 0" &&
-	echo $defaultq | jq -e ".job_states.inactive == 0" &&
-	echo $defaultq | jq -e ".job_states.total == 0" &&
-	echo $defaultq | jq -e ".successful == 0" &&
-	echo $defaultq | jq -e ".failed == 0" &&
-	echo $defaultq | jq -e ".canceled == 0" &&
-	echo $defaultq | jq -e ".timeout == 0" &&
-	echo $defaultq | jq -e ".inactive_purged == 0" &&
+	test -z "$defaultq" &&
 	echo $updateq | jq -e ".job_states.depend == 0" &&
 	echo $updateq | jq -e ".job_states.priority == 0" &&
 	echo $updateq | jq -e ".job_states.sched == 0" &&
